{"version":3,"sources":["webpack:///./src/components/constants.js","webpack:///./src/components/common/GriffeathMachine.css?dfff","webpack:///./src/components/optimized/utils.js","webpack:///./src/components/optimized/CanvasField.jsx","webpack:///./src/components/optimized/GriffeathMachine.jsx"],"names":["IDS","width","height","states","status","DEFAULT","_DEFAULT","STATUSES","play","pause","SPACE_CODE","module","exports","field","bigButton","getRandomField","_ref","x","y","Math","floor","random","mod","number","limit","getUpdatedField","_ref2","map","line","element","plusOne","mapNumToRGB","h","h2rgb","initT","t","r","g","b","round","colorMapping","DEFAULT_COLOR","CanvasField","drawPixel","index","_this","props","_getColor","length","i","getColor","uInt32Array","paint","_this$props","Uint32Array","canvasData","ImageData","Uint8ClampedArray","buffer","canvasContext","putImageData","refCanvas","elem","getContext","render","react_default","a","createElement","ref","this","React","PureComponent","GriffeathMachine","state","canvas","createRef","getActionName","randomizeField","processKey","e","keyCode","preventDefault","handlePlay","nextStep","requestID","requestAnimationFrame","cancelAnimationFrame","setState","current","handleNew","handleNext","changeHandler","name","value","_this$setState","componentWillMount","document","addEventListener","componentWillUnmount","es","onChange","id","label","defaultNum","onClick","onKeyDown","className","style","role","title","CanvasField_CanvasField","type","defaultProps"],"mappings":"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","file":"2.0b426e04.js","sourcesContent":["export const IDS = {\n  width: 'width',\n  height: 'height',\n  states: 'states',\n  status: 'status',\n}\n\nexport const DEFAULT = {\n  [IDS.width]: 700,\n  [IDS.height]: 700,\n  [IDS.states]: 16,\n}\n\nexport const STATUSES = {\n  play: 'Play',\n  pause: 'Pause',\n}\n\nexport const SPACE_CODE = 32\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"field\":\"GriffeathMachine__field__2ugWL\",\"bigButton\":\"GriffeathMachine__bigButton__1GY-9\"};","export function getRandomField ({ width, height, states }) {\n  const field = []\n\n  for (let x = 0; x < width; x += 1) {\n    field[x] = []\n    for (let y = 0; y < height; y += 1) {\n      field[x][y] = Math.floor(Math.random() * states)\n    }\n  }\n\n  return field\n}\n\nconst mod = (number, limit) => (number < 0 ? number + limit : number % limit)\n\nexport const getUpdatedField = ({ field, width, height, states }) => field.map((line, x) => line.map((element, y) => {\n  const plusOne = mod(element + 1, states)\n\n  if (field[x][mod(y - 1, height)] === plusOne\n    || field[x][mod(y + 1, height)] === plusOne\n    || field[mod(x - 1, width)][y] === plusOne\n    || field[mod(x + 1, width)][y] === plusOne) {\n    return plusOne\n  }\n\n  return element\n}))\n\nexport function mapNumToRGB (h) {\n  const h2rgb = (initT) => {\n    const t = initT < 0 ? initT + 1 : initT % 1\n\n    if (t < 1 / 6) {\n      return 6 * t\n    }\n    if (t < 1 / 2) {\n      return 1\n    }\n    if (t < 2 / 3) {\n      return ((2 / 3) - t) * 6\n    }\n\n    return 0\n  }\n\n  const r = h2rgb(h + (1 / 3))\n  const g = h2rgb(h)\n  const b = h2rgb(h - (1 / 3))\n\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255),\n  }\n}\n\nconst colorMapping = []\nconst DEFAULT_COLOR = { r: 0, g: 0, b: 0 }\n\nexport function getColor (h, states) {\n  if (colorMapping.length !== states) {\n    colorMapping.length = states\n    for (let i = 0; i < states; i += 1) {\n      colorMapping[i] = mapNumToRGB(i / states)\n    }\n  }\n  return colorMapping[h] || DEFAULT_COLOR\n}\n","/* eslint-disable no-bitwise */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { getColor } from './utils'\n\nexport default class CanvasField extends React.PureComponent {\n  static propTypes = {\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    states: PropTypes.number.isRequired,\n  }\n\n  drawPixel = (x, y, h, states) => {\n    const index = x + (y * this.props.width)\n    const { r, g, b } = getColor(h, states)\n\n    this.uInt32Array[index] = (255 << 24) | (b << 16) | (g << 8) | r\n  }\n\n  paint = (field) => {\n    const { width, height, states } = this.props\n\n    this.uInt32Array = new Uint32Array(width * height)\n\n    for (let x = 0; x < width; x += 1) {\n      for (let y = 0; y < height; y += 1) {\n        if (field[x]) {\n          this.drawPixel(x, y, field[x][y], states)\n        }\n      }\n    }\n\n    const canvasData = new ImageData(new Uint8ClampedArray(this.uInt32Array.buffer), width, height)\n    this.canvasContext.putImageData(canvasData, 0, 0)\n  }\n\n  refCanvas = (elem) => {\n    // on unmount\n    if (!elem) {\n      return\n    }\n    this.canvasContext = elem.getContext('2d')\n  }\n\n  canvasContext\n\n  uInt32Array\n\n  render () {\n    return (\n      <canvas\n        ref={this.refCanvas}\n        width={this.props.width}\n        height={this.props.height}\n      >\n        {'You are using an outdated browser without support of canvas elements.'}\n      </canvas>\n    )\n  }\n}\n","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { Connector, Input } from 'state-control'\nimport { DEFAULT, IDS, SPACE_CODE, STATUSES } from '../constants'\nimport style from '../common/GriffeathMachine.css'\nimport { getRandomField, getUpdatedField } from './utils'\nimport CanvasField from './CanvasField'\n\nexport default class GriffeathMachine extends PureComponent {\n  static propTypes = {\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    states: PropTypes.number.isRequired,\n  }\n\n  static defaultProps = { ...DEFAULT }\n\n  state = {\n    width: this.props.width,\n    height: this.props.height,\n    states: this.props.states,\n    status: STATUSES.pause,\n  }\n\n  field = null\n\n  canvas = React.createRef()\n\n  componentWillMount () {\n    this.randomizeField()\n    this.handlePlay()\n    document.addEventListener('keydown', this.processKey)\n  }\n\n  componentWillUnmount () {\n    cancelAnimationFrame(this.requestID)\n  }\n\n  getActionName = () => (this.state.status === STATUSES.play ? STATUSES.pause : STATUSES.play)\n\n  randomizeField = () => {\n    this.field = getRandomField(this.state)\n  }\n\n  processKey = (e) => {\n    if (e.keyCode === SPACE_CODE) {\n      e.preventDefault()\n      this.handlePlay()\n    }\n  }\n\n  nextStep = () => {\n    try {\n      this.field = getUpdatedField({ ...this.state, field: this.field })\n\n      if (this.state.status === STATUSES.play) {\n        this.requestID = requestAnimationFrame(this.nextStep)\n      }\n    } catch (e) {\n      cancelAnimationFrame(this.requestID)\n      this.field = getRandomField(this.state)\n      this.setState({\n        status: STATUSES.pause,\n      })\n    }\n    this.canvas.current.paint(this.field)\n  }\n\n  handleNew = () => {\n    this.randomizeField()\n    this.canvas.current.paint(this.field)\n  }\n\n  handleNext = () => {\n    this.field = getUpdatedField({ ...this.state, field: this.field })\n    this.canvas.current.paint(this.field)\n  }\n\n  handlePlay = () => {\n    switch (this.state.status) {\n      case STATUSES.play:\n        this.setState({ status: STATUSES.pause })\n        break\n      case STATUSES.pause:\n        this.setState({ status: STATUSES.play }, this.nextStep)\n        break\n      default:\n    }\n  }\n\n  changeHandler = (name, value) => {\n    this.setState({ [name]: value })\n  }\n\n  render () {\n    return (\n      <div>\n        <Connector\n          state={this.state}\n          onChange={this.changeHandler}\n        >\n          <Input\n            id={IDS.width}\n            label=\"Field width\"\n            defaultNum={1}\n          />\n          <Input\n            id={IDS.height}\n            label=\"Field height\"\n            defaultNum={1}\n          />\n          <Input\n            id={IDS.states}\n            label=\"Number of states\"\n            defaultNum={1}\n          />\n        </Connector>\n        <div\n          onClick={this.handlePlay}\n          onKeyDown={this.processKey}\n          className={style.field}\n          role=\"presentation\"\n          title={this.getActionName()}\n        >\n          <CanvasField\n            width={this.state.width}\n            height={this.state.height}\n            states={this.state.states}\n            ref={this.canvas}\n          />\n        </div>\n        <p><em>Press Space or click field for play / pause</em></p>\n        <button type=\"button\" className={style.bigButton} onClick={this.handleNew}>\n          New\n        </button>\n        <button type=\"button\" className={style.bigButton} onClick={this.handlePlay}>\n          {this.getActionName()}\n        </button>\n        {this.state.status === STATUSES.pause && (\n          <button type=\"button\" className={style.bigButton} onClick={this.handleNext}>\n            Next step\n          </button>\n        )}\n      </div>\n    )\n  }\n}\n"],"sourceRoot":""}