{"version":3,"sources":["webpack:///./src/components/constants.js","webpack:///./src/components/common/GriffeathMachine.css?dfff","webpack:///./src/components/gpu/utils.js","webpack:///./src/components/gpu/gpu-utils.js","webpack:///./src/components/gpu/CanvasField.jsx","webpack:///./src/components/gpu/GriffeathMachine.jsx"],"names":["IDS","width","height","states","status","DEFAULT","_DEFAULT","STATUSES","play","pause","SPACE_CODE","module","exports","field","bigButton","getRandomField","_ref","x","y","Math","floor","random","mapNumToRGB","h","h2rgb","initT","t","r","g","b","round","colorMapping","DEFAULT_COLOR","myMod","number","limit","myKernel","ver","this","thread","hor","element","plusOne","next","gpu","GPU","makeGetUpdatedField","fieldWidth","fieldHeight","createKernel","setOutput","setFunctions","CanvasField","drawPixel","index","_this","props","_getColor","length","i","getColor","uInt32Array","paint","_this$props","Uint32Array","canvasData","ImageData","Uint8ClampedArray","buffer","canvasContext","putImageData","refCanvas","elem","getContext","render","react_default","a","createElement","ref","React","PureComponent","GriffeathMachine","state","canvas","createRef","getActionName","randomizeField","processKey","e","keyCode","preventDefault","handlePlay","updateFieldSize","_ref$width","undefined","_ref$height","fieldUpdater","getUpdatedField","_this$state","nextStep","requestID","requestAnimationFrame","cancelAnimationFrame","setState","current","handleNew","handleNext","changeHandler","name","value","_this$setState","componentWillMount","document","addEventListener","componentWillUnmount","es","onChange","id","label","defaultNum","onClick","onKeyDown","className","style","role","title","CanvasField_CanvasField","_ref2","type","defaultProps"],"mappings":"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","file":"4.7c40a7cc.js","sourcesContent":["export const IDS = {\n  width: 'width',\n  height: 'height',\n  states: 'states',\n  status: 'status',\n}\n\nexport const DEFAULT = {\n  [IDS.width]: 700,\n  [IDS.height]: 700,\n  [IDS.states]: 16,\n}\n\nexport const STATUSES = {\n  play: 'Play',\n  pause: 'Pause',\n}\n\nexport const SPACE_CODE = 32\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"field\":\"GriffeathMachine__field__2ugWL\",\"bigButton\":\"GriffeathMachine__bigButton__1GY-9\"};","export function getRandomField ({ width, height, states }) {\n  const field = []\n\n  for (let x = 0; x < width; x += 1) {\n    field[x] = []\n    for (let y = 0; y < height; y += 1) {\n      field[x][y] = Math.floor(Math.random() * states)\n    }\n  }\n\n  return field\n}\n\nexport function mapNumToRGB (h) {\n  const h2rgb = (initT) => {\n    const t = initT < 0 ? initT + 1 : initT % 1\n\n    if (t < 1 / 6) {\n      return 6 * t\n    }\n    if (t < 1 / 2) {\n      return 1\n    }\n    if (t < 2 / 3) {\n      return ((2 / 3) - t) * 6\n    }\n\n    return 0\n  }\n\n  const r = h2rgb(h + (1 / 3))\n  const g = h2rgb(h)\n  const b = h2rgb(h - (1 / 3))\n\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255),\n  }\n}\n\nconst colorMapping = []\nconst DEFAULT_COLOR = { r: 0, g: 0, b: 0 }\n\nexport function getColor (h, states) {\n  if (colorMapping.length !== states) {\n    colorMapping.length = states\n    for (let i = 0; i < states; i += 1) {\n      colorMapping[i] = mapNumToRGB(i / states)\n    }\n  }\n  return colorMapping[h] || DEFAULT_COLOR\n}\n","import GPU from 'gpu.js'\r\n\r\nfunction myMod (number, limit) {\r\n  if (number < 0) {\r\n    return number + limit\r\n  }\r\n  return (number % limit)\r\n}\r\n\r\nfunction myKernel (field, width, height, states) {\r\n  // what a mess\r\n  const ver = this.thread.x\r\n  const hor = this.thread.y\r\n  const element = field[hor][ver]\r\n  const plusOne = myMod(element + 1, states)\r\n\r\n  let next = myMod(hor - 1, width)\r\n  if (field[next][ver] === plusOne) {\r\n    return plusOne\r\n  }\r\n\r\n  next = myMod(hor + 1, width)\r\n  if (field[next][ver] === plusOne) {\r\n    return plusOne\r\n  }\r\n\r\n  next = myMod(ver - 1, height)\r\n  if (field[hor][next] === plusOne) {\r\n    return plusOne\r\n  }\r\n\r\n  next = myMod(ver + 1, height)\r\n  if (field[hor][next] === plusOne) {\r\n    return plusOne\r\n  }\r\n\r\n  return element\r\n}\r\n\r\nconst gpu = new GPU()\r\n\r\nexport const makeGetUpdatedField = (fieldWidth, fieldHeight) => gpu\r\n  .createKernel(myKernel)\r\n  .setOutput([fieldHeight, fieldWidth]) // more of the mess\r\n  .setFunctions([myMod])\r\n","/* eslint-disable no-bitwise */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { getColor } from './utils'\n\nexport default class CanvasField extends React.PureComponent {\n  static propTypes = {\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    states: PropTypes.number.isRequired,\n  }\n\n  drawPixel = (x, y, h, states) => {\n    const index = x + (y * this.props.width)\n    const { r, g, b } = getColor(h, states)\n\n    this.uInt32Array[index] = (255 << 24) | (b << 16) | (g << 8) | r\n  }\n\n  paint = (field) => {\n    const { width, height, states } = this.props\n\n    this.uInt32Array = new Uint32Array(width * height)\n\n    for (let x = 0; x < width; x += 1) {\n      for (let y = 0; y < height; y += 1) {\n        if (field[x]) {\n          this.drawPixel(x, y, field[x][y], states)\n        }\n      }\n    }\n\n    const canvasData = new ImageData(new Uint8ClampedArray(this.uInt32Array.buffer), width, height)\n    this.canvasContext.putImageData(canvasData, 0, 0)\n  }\n\n  refCanvas = (elem) => {\n    this.canvasContext = elem && elem.getContext('2d')\n  }\n\n  canvasContext\n\n  uInt32Array\n\n  render () {\n    return (\n      <canvas\n        ref={this.refCanvas}\n        width={this.props.width}\n        height={this.props.height}\n      >\n        {'You are using an outdated browser without support of canvas elements.'}\n      </canvas>\n    )\n  }\n}\n","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { Connector, Input } from 'state-control'\nimport { DEFAULT, IDS, SPACE_CODE, STATUSES } from '../constants'\nimport style from '../common/GriffeathMachine.css'\nimport { getRandomField} from './utils'\nimport { makeGetUpdatedField } from './gpu-utils'\nimport CanvasField from './CanvasField'\n\nexport default class GriffeathMachine extends PureComponent {\n  static propTypes = {\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    states: PropTypes.number.isRequired,\n  }\n\n  static defaultProps = { ...DEFAULT }\n\n  state = {\n    width: this.props.width,\n    height: this.props.height,\n    states: this.props.states,\n    status: STATUSES.pause,\n  }\n\n  field = null\n\n  canvas = React.createRef()\n\n  componentWillMount () {\n    this.randomizeField()\n    this.handlePlay()\n    document.addEventListener('keydown', this.processKey)\n    this.updateFieldSize({})\n  }\n\n  componentWillUnmount () {\n    cancelAnimationFrame(this.requestID)\n  }\n\n  getActionName = () => (this.state.status === STATUSES.play ? STATUSES.pause : STATUSES.play)\n\n  randomizeField = () => {\n    this.field = getRandomField(this.state)\n  }\n\n  processKey = (e) => {\n    if (e.keyCode === SPACE_CODE) {\n      e.preventDefault()\n      this.handlePlay()\n    }\n  }\n\n  updateFieldSize = ({ width = this.props.width, height = this.props.height }) => {\n    this.fieldUpdater = makeGetUpdatedField(width, height)\n  }\n\n  getUpdatedField = () => {\n    const { width, height, states } = this.state\n    return this.fieldUpdater(this.field, width, height, states)\n  }\n\n  nextStep = () => {\n    try {\n      this.field = this.getUpdatedField()\n\n      if (this.state.status === STATUSES.play) {\n        this.requestID = requestAnimationFrame(this.nextStep)\n      }\n    } catch (e) {\n      cancelAnimationFrame(this.requestID)\n      this.field = getRandomField(this.state)\n      this.setState({\n        status: STATUSES.pause,\n      })\n    }\n    this.canvas.current.paint(this.field)\n  }\n\n  handleNew = () => {\n    this.randomizeField()\n    this.canvas.current.paint(this.field)\n  }\n\n  handleNext = () => {\n    this.field = this.getUpdatedField()\n    this.canvas.current.paint(this.field)\n  }\n\n  handlePlay = () => {\n    switch (this.state.status) {\n      case STATUSES.play:\n        this.setState({ status: STATUSES.pause })\n        break\n      case STATUSES.pause:\n        this.setState({ status: STATUSES.play }, this.nextStep)\n        break\n      default:\n    }\n  }\n\n  changeHandler = (name, value) => {\n    switch (name) {\n      case IDS.width:\n        this.updateFieldSize({ width: value })\n        break\n      case IDS.height:\n        this.updateFieldSize({ height: value })\n        break\n      default:\n    }\n    this.setState({ [name]: value })\n  }\n\n  fieldUpdater\n\n  render () {\n    return (\n      <div>\n        <Connector\n          state={this.state}\n          onChange={this.changeHandler}\n        >\n          <Input\n            id={IDS.width}\n            label=\"Field width\"\n            defaultNum={1}\n          />\n          <Input\n            id={IDS.height}\n            label=\"Field height\"\n            defaultNum={1}\n          />\n          <Input\n            id={IDS.states}\n            label=\"Number of states\"\n            defaultNum={1}\n          />\n        </Connector>\n        <div\n          onClick={this.handlePlay}\n          onKeyDown={this.processKey}\n          className={style.field}\n          role=\"presentation\"\n          title={this.getActionName()}\n        >\n          <CanvasField\n            width={this.state.width}\n            height={this.state.height}\n            states={this.state.states}\n            ref={this.canvas}\n          />\n        </div>\n        <p><em>Press Space or click field for play / pause</em></p>\n        <button type=\"button\" className={style.bigButton} onClick={this.handleNew}>\n          New\n        </button>\n        <button type=\"button\" className={style.bigButton} onClick={this.handlePlay}>\n          {this.getActionName()}\n        </button>\n        {this.state.status === STATUSES.pause && (\n          <button type=\"button\" className={style.bigButton} onClick={this.handleNext}>\n            Next step\n          </button>\n        )}\n      </div>\n    )\n  }\n}\n"],"sourceRoot":""}