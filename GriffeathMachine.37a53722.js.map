{"version":3,"sources":["components/original/CanvasField.jsx","components/original/GriffeathMachine.jsx"],"names":["CanvasField","drawPixel","x","y","h","index","props","width","r","g","b","canvasData","data","paint","field","canvasContext","getImageData","height","states","putImageData","refCanvas","elem","getContext","React","PureComponent","propTypes","PropTypes","number","isRequired","DEFAULT","GriffeathMachine","state","status","STATUSES","pause","canvas","createRef","getActionName","play","randomizeField","processKey","e","keyCode","SPACE_CODE","preventDefault","handlePlay","nextStep","requestID","requestAnimationFrame","cancelAnimationFrame","setState","current","handleNew","handleNext","changeHandler","name","value","document","addEventListener","IDS","style","bigButton","defaultProps"],"mappings":"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","file":"GriffeathMachine.37a53722.js","sourceRoot":"..\\src","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport hueToRgb from 'number-to-color/map'\n\nexport default class CanvasField extends React.PureComponent {\n  static propTypes = {\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    states: PropTypes.number.isRequired,\n  }\n\n  drawPixel = (x, y, h) => {\n    const index = (x + (y * this.props.width)) * 4\n    const { r, g, b } = hueToRgb(h)\n\n    this.canvasData.data[index] = r\n    this.canvasData.data[index + 1] = g\n    this.canvasData.data[index + 2] = b\n    this.canvasData.data[index + 3] = 255\n  }\n\n  paint = (field) => {\n    this.canvasData = this.canvasContext.getImageData(0, 0, this.props.width, this.props.height)\n\n    for (let x = 0; x < this.props.width; x += 1) {\n      for (let y = 0; y < this.props.height; y += 1) {\n        if (field[x]) {\n          this.drawPixel(x, y, field[x][y] / this.props.states)\n        }\n      }\n    }\n\n    this.canvasContext.putImageData(this.canvasData, 0, 0)\n  }\n\n  refCanvas = (elem) => {\n    this.canvasContext = elem && elem.getContext('2d')\n  }\n\n  canvasContext\n\n  canvasData\n\n  render () {\n    return (\n      <canvas\n        ref={this.refCanvas}\n        width={this.props.width}\n        height={this.props.height}\n      >\n        {'You are using an outdated browser without support of canvas elements.'}\n      </canvas>\n    )\n  }\n}\n","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { Connector, Input } from 'state-control'\nimport { DEFAULT, IDS, SPACE_CODE, STATUSES } from '../constants'\nimport style from '../common/GriffeathMachine.css'\nimport { getRandomField, getUpdatedField } from '../common/utils'\nimport CanvasField from './CanvasField'\n\nexport default class GriffeathMachine extends PureComponent {\n  static propTypes = {\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    states: PropTypes.number.isRequired,\n  }\n\n  static defaultProps = { ...DEFAULT }\n\n  state = {\n    width: this.props.width,\n    height: this.props.height,\n    states: this.props.states,\n    status: STATUSES.pause,\n  }\n\n  field = null\n\n  canvas = React.createRef()\n\n  componentWillMount () {\n    this.randomizeField()\n    this.handlePlay()\n    document.addEventListener('keydown', this.processKey)\n  }\n\n  componentWillUnmount () {\n    cancelAnimationFrame(this.requestID)\n  }\n\n  getActionName = () => (this.state.status === STATUSES.play ? STATUSES.pause : STATUSES.play)\n\n  randomizeField = () => {\n    this.field = getRandomField(this.state)\n  }\n\n  processKey = (e) => {\n    if (e.keyCode === SPACE_CODE) {\n      e.preventDefault()\n      this.handlePlay()\n    }\n  }\n\n  nextStep = () => {\n    try {\n      this.field = getUpdatedField({ ...this.state, field: this.field })\n\n      if (this.state.status === STATUSES.play) {\n        this.requestID = requestAnimationFrame(this.nextStep)\n      }\n    } catch (e) {\n      cancelAnimationFrame(this.requestID)\n      this.field = getRandomField(this.state)\n      this.setState({\n        status: STATUSES.pause,\n      })\n    }\n    this.canvas.current.paint(this.field)\n  }\n\n  handleNew = () => {\n    this.randomizeField()\n    this.canvas.current.paint(this.field)\n  }\n\n  handleNext = () => {\n    this.field = getUpdatedField({ ...this.state, field: this.field })\n    this.canvas.current.paint(this.field)\n  }\n\n  handlePlay = () => {\n    switch (this.state.status) {\n      case STATUSES.play:\n        this.setState({ status: STATUSES.pause })\n        break\n      case STATUSES.pause:\n        this.setState({ status: STATUSES.play }, this.nextStep)\n        break\n      default:\n    }\n  }\n\n  changeHandler = (name, value) => {\n    this.setState({ [name]: value })\n  }\n\n  render () {\n    return (\n      <div>\n        <Connector\n          state={this.state}\n          onChange={this.changeHandler}\n        >\n          <Input\n            id={IDS.width}\n            label=\"Field width\"\n            defaultNum={1}\n          />\n          <Input\n            id={IDS.height}\n            label=\"Field height\"\n            defaultNum={1}\n          />\n          <Input\n            id={IDS.states}\n            label=\"Number of states\"\n            defaultNum={1}\n          />\n        </Connector>\n        <div\n          onClick={this.handlePlay}\n          onKeyDown={this.processKey}\n          className={style.field}\n          role=\"presentation\"\n          title={this.getActionName()}\n        >\n          <CanvasField\n            width={this.state.width}\n            height={this.state.height}\n            field={this.field}\n            states={this.state.states}\n            ref={this.canvas}\n          />\n        </div>\n        <p><em>Press Space or click field for play / pause</em></p>\n        <button type=\"button\" className={style.bigButton} onClick={this.handleNew}>\n          New\n        </button>\n        <button type=\"button\" className={style.bigButton} onClick={this.handlePlay}>\n          {this.getActionName()}\n        </button>\n        {this.state.status === STATUSES.pause && (\n          <button type=\"button\" className={style.bigButton} onClick={this.handleNext}>\n            Next step\n          </button>\n        )}\n      </div>\n    )\n  }\n}\n"]}