{"version":3,"sources":["webpack:///./src/components/constants.js","webpack:///./src/components/common/GriffeathMachine.css?dfff","webpack:///./src/components/common/utils.js","webpack:///./src/components/common/CanvasField.jsx","webpack:///./src/components/gpu/gpu-utils.js","webpack:///./src/components/gpu/GriffeathMachine.jsx"],"names":["IDS","width","height","states","status","DEFAULT","STATUSES","play","pause","SPACE_CODE","getRandomField","field","x","y","Math","floor","random","mod","number","limit","getUpdatedField","map","line","element","plusOne","CanvasField","drawPixel","h","index","props","getColor","r","g","b","uInt32Array","paint","Uint32Array","canvasData","ImageData","Uint8ClampedArray","buffer","canvasContext","putImageData","refCanvas","elem","getContext","render","React","PureComponent","myMod","myKernel","ver","thread","hor","next","gpu","GPU","makeGetUpdatedField","fieldWidth","fieldHeight","createKernel","setOutput","setFunctions","GriffeathMachine","state","canvas","createRef","getActionName","randomizeField","processKey","e","keyCode","preventDefault","handlePlay","updateFieldSize","fieldUpdater","nextStep","requestID","requestAnimationFrame","cancelAnimationFrame","setState","current","handleNew","handleNext","changeHandler","name","value","componentWillMount","document","addEventListener","componentWillUnmount","style","bigButton","defaultProps"],"mappings":"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","file":"4.caeace9c.js","sourcesContent":["export const IDS = {\n  width: 'width',\n  height: 'height',\n  states: 'states',\n  status: 'status',\n}\n\nexport const DEFAULT = {\n  [IDS.width]: 700,\n  [IDS.height]: 700,\n  [IDS.states]: 16,\n}\n\nexport const STATUSES = {\n  play: 'Play',\n  pause: 'Pause',\n}\n\nexport const SPACE_CODE = 32\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"field\":\"GriffeathMachine__field__2ugWL\",\"bigButton\":\"GriffeathMachine__bigButton__1GY-9\"};","export function getRandomField ({ width, height, states }) {\n  const field = []\n\n  for (let x = 0; x < width; x += 1) {\n    field[x] = []\n    for (let y = 0; y < height; y += 1) {\n      field[x][y] = Math.floor(Math.random() * states)\n    }\n  }\n\n  return field\n}\n\nconst mod = (number, limit) => (number < 0 ? number + limit : number % limit)\n\nexport const getUpdatedField = ({ field, width, height, states }) => field.map((line, x) => line.map((element, y) => {\n  const plusOne = mod(element + 1, states)\n\n  if (field[x][mod(y - 1, height)] === plusOne\n    || field[x][mod(y + 1, height)] === plusOne\n    || field[mod(x - 1, width)][y] === plusOne\n    || field[mod(x + 1, width)][y] === plusOne) {\n    return plusOne\n  }\n\n  return element\n}))\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport getColor from 'number-to-color'\n\nexport default class CanvasField extends React.PureComponent {\n  static propTypes = {\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    states: PropTypes.number.isRequired,\n  }\n\n  drawPixel = (x, y, h, states) => {\n    const index = x + (y * this.props.width)\n    const { r, g, b } = getColor(h, states)\n\n    /* eslint-disable-next-line no-bitwise */\n    this.uInt32Array[index] = (255 << 24) | (b << 16) | (g << 8) | r\n  }\n\n  paint = (field) => {\n    const { width, height, states } = this.props\n\n    this.uInt32Array = new Uint32Array(width * height)\n\n    for (let x = 0; x < width; x += 1) {\n      for (let y = 0; y < height; y += 1) {\n        if (field[x]) {\n          this.drawPixel(x, y, field[x][y], states)\n        }\n      }\n    }\n\n    const canvasData = new ImageData(new Uint8ClampedArray(this.uInt32Array.buffer), width, height)\n    this.canvasContext.putImageData(canvasData, 0, 0)\n  }\n\n  refCanvas = (elem) => {\n    this.canvasContext = elem && elem.getContext('2d')\n  }\n\n  canvasContext\n\n  uInt32Array\n\n  render () {\n    return (\n      <canvas\n        ref={this.refCanvas}\n        width={this.props.width}\n        height={this.props.height}\n      >\n        {'You are using an outdated browser without support of canvas elements.'}\n      </canvas>\n    )\n  }\n}\n","import GPU from 'gpu.js'\n\nfunction myMod (number, limit) {\n  if (number < 0) {\n    return number + limit\n  }\n  return (number % limit)\n}\n\nfunction myKernel (field, width, height, states) {\n  // what a mess\n  const ver = this.thread.x\n  const hor = this.thread.y\n  const element = field[hor][ver]\n  const plusOne = myMod(element + 1, states)\n\n  let next = myMod(hor - 1, width)\n  if (field[next][ver] === plusOne) {\n    return plusOne\n  }\n\n  next = myMod(hor + 1, width)\n  if (field[next][ver] === plusOne) {\n    return plusOne\n  }\n\n  next = myMod(ver - 1, height)\n  if (field[hor][next] === plusOne) {\n    return plusOne\n  }\n\n  next = myMod(ver + 1, height)\n  if (field[hor][next] === plusOne) {\n    return plusOne\n  }\n\n  return element\n}\n\nconst gpu = new GPU()\n\nexport const makeGetUpdatedField = (fieldWidth, fieldHeight) => gpu\n  .createKernel(myKernel)\n  .setOutput([fieldHeight, fieldWidth]) // more of the mess\n  .setFunctions([myMod])\n","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { Connector, Input } from 'state-control'\nimport { DEFAULT, IDS, SPACE_CODE, STATUSES } from '../constants'\nimport style from '../common/GriffeathMachine.css'\nimport CanvasField from '../common/CanvasField'\nimport { getRandomField } from '../common/utils'\nimport { makeGetUpdatedField } from './gpu-utils'\n\nexport default class GriffeathMachine extends PureComponent {\n  static propTypes = {\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    states: PropTypes.number.isRequired,\n  }\n\n  static defaultProps = { ...DEFAULT }\n\n  state = {\n    width: this.props.width,\n    height: this.props.height,\n    states: this.props.states,\n    status: STATUSES.pause,\n  }\n\n  field = null\n\n  canvas = React.createRef()\n\n  componentWillMount () {\n    this.randomizeField()\n    this.handlePlay()\n    document.addEventListener('keydown', this.processKey)\n    this.updateFieldSize({})\n  }\n\n  componentWillUnmount () {\n    cancelAnimationFrame(this.requestID)\n  }\n\n  getActionName = () => (this.state.status === STATUSES.play ? STATUSES.pause : STATUSES.play)\n\n  randomizeField = () => {\n    this.field = getRandomField(this.state)\n  }\n\n  processKey = (e) => {\n    if (e.keyCode === SPACE_CODE) {\n      e.preventDefault()\n      this.handlePlay()\n    }\n  }\n\n  updateFieldSize = ({ width = this.props.width, height = this.props.height }) => {\n    this.fieldUpdater = makeGetUpdatedField(width, height)\n  }\n\n  getUpdatedField = () => {\n    const { width, height, states } = this.state\n    return this.fieldUpdater(this.field, width, height, states)\n  }\n\n  nextStep = () => {\n    try {\n      this.field = this.getUpdatedField()\n\n      if (this.state.status === STATUSES.play) {\n        this.requestID = requestAnimationFrame(this.nextStep)\n      }\n    } catch (e) {\n      cancelAnimationFrame(this.requestID)\n      this.field = getRandomField(this.state)\n      this.setState({\n        status: STATUSES.pause,\n      })\n    }\n    this.canvas.current.paint(this.field)\n  }\n\n  handleNew = () => {\n    this.randomizeField()\n    this.canvas.current.paint(this.field)\n  }\n\n  handleNext = () => {\n    this.field = this.getUpdatedField()\n    this.canvas.current.paint(this.field)\n  }\n\n  handlePlay = () => {\n    switch (this.state.status) {\n      case STATUSES.play:\n        this.setState({ status: STATUSES.pause })\n        break\n      case STATUSES.pause:\n        this.setState({ status: STATUSES.play }, this.nextStep)\n        break\n      default:\n    }\n  }\n\n  changeHandler = (name, value) => {\n    switch (name) {\n      case IDS.width:\n        this.updateFieldSize({ width: value })\n        break\n      case IDS.height:\n        this.updateFieldSize({ height: value })\n        break\n      default:\n    }\n    this.setState({ [name]: value })\n  }\n\n  fieldUpdater\n\n  render () {\n    return (\n      <div>\n        <Connector\n          state={this.state}\n          onChange={this.changeHandler}\n        >\n          <Input\n            id={IDS.width}\n            label=\"Field width\"\n            defaultNum={1}\n          />\n          <Input\n            id={IDS.height}\n            label=\"Field height\"\n            defaultNum={1}\n          />\n          <Input\n            id={IDS.states}\n            label=\"Number of states\"\n            defaultNum={1}\n          />\n        </Connector>\n        <div\n          onClick={this.handlePlay}\n          onKeyDown={this.processKey}\n          className={style.field}\n          role=\"presentation\"\n          title={this.getActionName()}\n        >\n          <CanvasField\n            width={this.state.width}\n            height={this.state.height}\n            states={this.state.states}\n            ref={this.canvas}\n          />\n        </div>\n        <p><em>Press Space or click field for play / pause</em></p>\n        <button type=\"button\" className={style.bigButton} onClick={this.handleNew}>\n          New\n        </button>\n        <button type=\"button\" className={style.bigButton} onClick={this.handlePlay}>\n          {this.getActionName()}\n        </button>\n        {this.state.status === STATUSES.pause && (\n          <button type=\"button\" className={style.bigButton} onClick={this.handleNext}>\n            Next step\n          </button>\n        )}\n      </div>\n    )\n  }\n}\n"],"sourceRoot":""}