{"version":3,"sources":["webpack:///./src/components/constants.js","webpack:///./src/components/common/GriffeathMachine.css?dfff","webpack:///./src/components/gpu/utils.js","webpack:///./src/components/gpu/CanvasField.jsx","webpack:///./src/components/gpu/GriffeathMachine.jsx"],"names":["IDS","width","height","states","status","DEFAULT","_DEFAULT","STATUSES","play","pause","SPACE_CODE","module","exports","field","bigButton","getRandomField","_ref","x","y","Math","floor","random","myMod","number","limit","gpu","GPU","addFunction","makeGetUpdatedField","fieldWidth","fieldHeight","createKernel","ver","this","thread","hor","element","plusOne","next","setOutput","mapNumToRGB","h","h2rgb","initT","t","r","g","b","round","colorMapping","DEFAULT_COLOR","CanvasField","drawPixel","index","_this","props","_getColor","length","i","getColor","uInt32Array","paint","_this$props","Uint32Array","canvasData","ImageData","Uint8ClampedArray","buffer","canvasContext","putImageData","refCanvas","elem","getContext","render","react_default","a","createElement","ref","React","PureComponent","GriffeathMachine","state","canvas","createRef","getActionName","randomizeField","processKey","e","keyCode","preventDefault","handlePlay","updateFieldSize","_ref$width","undefined","_ref$height","fieldUpdater","getUpdatedField","_this$state","nextStep","requestID","requestAnimationFrame","cancelAnimationFrame","setState","current","handleNew","handleNext","changeHandler","name","value","_this$setState","componentWillMount","document","addEventListener","componentWillUnmount","es","onChange","id","label","defaultNum","onClick","onKeyDown","className","style","role","title","CanvasField_CanvasField","_ref2","type","defaultProps"],"mappings":"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","file":"4.a3dcacc0.js","sourcesContent":["export const IDS = {\n  width: 'width',\n  height: 'height',\n  states: 'states',\n  status: 'status',\n}\n\nexport const DEFAULT = {\n  [IDS.width]: 700,\n  [IDS.height]: 700,\n  [IDS.states]: 16,\n}\n\nexport const STATUSES = {\n  play: 'Play',\n  pause: 'Pause',\n}\n\nexport const SPACE_CODE = 32\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"field\":\"GriffeathMachine__field__2ugWL\",\"bigButton\":\"GriffeathMachine__bigButton__1GY-9\"};","/* eslint-disable prefer-arrow-callback */\n// todo move GPU to separate file\nimport GPU from 'gpu.js'\n\nexport function getRandomField ({ width, height, states }) {\n  const field = []\n\n  for (let x = 0; x < width; x += 1) {\n    field[x] = []\n    for (let y = 0; y < height; y += 1) {\n      field[x][y] = Math.floor(Math.random() * states)\n    }\n  }\n\n  return field\n}\n\nfunction myMod (number, limit) {\n  if (number < 0) {\n    return number + limit\n  }\n  return number % limit\n}\n\nconst gpu = new GPU()\ngpu.addFunction(myMod)\n\nexport const makeGetUpdatedField = (fieldWidth, fieldHeight) => gpu.createKernel(function (field, width, height, states) {\n  // what a mess\n  const ver = this.thread.x\n  const hor = this.thread.y\n  const element = field[hor][ver]\n  const plusOne = myMod(element + 1, states)\n\n  let next = myMod(hor - 1, width)\n  if (field[next][ver] === plusOne) {\n    return plusOne\n  }\n\n  next = myMod(hor + 1, width)\n  if (field[next][ver] === plusOne) {\n    return plusOne\n  }\n\n  next = myMod(ver - 1, height)\n  if (field[hor][next] === plusOne) {\n    return plusOne\n  }\n\n  next = myMod(ver + 1, height)\n  if (field[hor][next] === plusOne) {\n    return plusOne\n  }\n\n  return element\n}).setOutput([fieldHeight, fieldWidth]) // more of the mess\n\nexport function mapNumToRGB (h) {\n  const h2rgb = (initT) => {\n    const t = initT < 0 ? initT + 1 : initT % 1\n\n    if (t < 1 / 6) {\n      return 6 * t\n    }\n    if (t < 1 / 2) {\n      return 1\n    }\n    if (t < 2 / 3) {\n      return ((2 / 3) - t) * 6\n    }\n\n    return 0\n  }\n\n  const r = h2rgb(h + (1 / 3))\n  const g = h2rgb(h)\n  const b = h2rgb(h - (1 / 3))\n\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255),\n  }\n}\n\nconst colorMapping = []\nconst DEFAULT_COLOR = { r: 0, g: 0, b: 0 }\n\nexport function getColor (h, states) {\n  if (colorMapping.length !== states) {\n    colorMapping.length = states\n    for (let i = 0; i < states; i += 1) {\n      colorMapping[i] = mapNumToRGB(i / states)\n    }\n  }\n  return colorMapping[h] || DEFAULT_COLOR\n}\n","/* eslint-disable no-bitwise */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { getColor } from './utils'\n\nexport default class CanvasField extends React.PureComponent {\n  static propTypes = {\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    states: PropTypes.number.isRequired,\n  }\n\n  drawPixel = (x, y, h, states) => {\n    const index = x + (y * this.props.width)\n    const { r, g, b } = getColor(h, states)\n\n    this.uInt32Array[index] = (255 << 24) | (b << 16) | (g << 8) | r\n  }\n\n  paint = (field) => {\n    const { width, height, states } = this.props\n\n    this.uInt32Array = new Uint32Array(width * height)\n\n    for (let x = 0; x < width; x += 1) {\n      for (let y = 0; y < height; y += 1) {\n        if (field[x]) {\n          this.drawPixel(x, y, field[x][y], states)\n        }\n      }\n    }\n\n    const canvasData = new ImageData(new Uint8ClampedArray(this.uInt32Array.buffer), width, height)\n    this.canvasContext.putImageData(canvasData, 0, 0)\n  }\n\n  refCanvas = (elem) => {\n    this.canvasContext = elem && elem.getContext('2d')\n  }\n\n  canvasContext\n\n  uInt32Array\n\n  render () {\n    return (\n      <canvas\n        ref={this.refCanvas}\n        width={this.props.width}\n        height={this.props.height}\n      >\n        {'You are using an outdated browser without support of canvas elements.'}\n      </canvas>\n    )\n  }\n}\n","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { Connector, Input } from 'state-control'\nimport { DEFAULT, IDS, SPACE_CODE, STATUSES } from '../constants'\nimport style from '../common/GriffeathMachine.css'\nimport { getRandomField, makeGetUpdatedField } from './utils'\nimport CanvasField from './CanvasField'\n\nexport default class GriffeathMachine extends PureComponent {\n  static propTypes = {\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    states: PropTypes.number.isRequired,\n  }\n\n  static defaultProps = { ...DEFAULT }\n\n  state = {\n    width: this.props.width,\n    height: this.props.height,\n    states: this.props.states,\n    status: STATUSES.pause,\n  }\n\n  field = null\n\n  canvas = React.createRef()\n\n  componentWillMount () {\n    this.randomizeField()\n    this.handlePlay()\n    document.addEventListener('keydown', this.processKey)\n    this.updateFieldSize({})\n  }\n\n  componentWillUnmount () {\n    cancelAnimationFrame(this.requestID)\n  }\n\n  getActionName = () => (this.state.status === STATUSES.play ? STATUSES.pause : STATUSES.play)\n\n  randomizeField = () => {\n    this.field = getRandomField(this.state)\n  }\n\n  processKey = (e) => {\n    if (e.keyCode === SPACE_CODE) {\n      e.preventDefault()\n      this.handlePlay()\n    }\n  }\n\n  updateFieldSize = ({ width = this.props.width, height = this.props.height }) => {\n    this.fieldUpdater = makeGetUpdatedField(width, height)\n  }\n\n  getUpdatedField = () => {\n    const { width, height, states } = this.state\n    return this.fieldUpdater(this.field, width, height, states)\n  }\n\n  nextStep = () => {\n    try {\n      this.field = this.getUpdatedField()\n\n      if (this.state.status === STATUSES.play) {\n        this.requestID = requestAnimationFrame(this.nextStep)\n      }\n    } catch (e) {\n      cancelAnimationFrame(this.requestID)\n      this.field = getRandomField(this.state)\n      this.setState({\n        status: STATUSES.pause,\n      })\n    }\n    this.canvas.current.paint(this.field)\n  }\n\n  handleNew = () => {\n    this.randomizeField()\n    this.canvas.current.paint(this.field)\n  }\n\n  handleNext = () => {\n    this.field = this.getUpdatedField()\n    this.canvas.current.paint(this.field)\n  }\n\n  handlePlay = () => {\n    switch (this.state.status) {\n      case STATUSES.play:\n        this.setState({ status: STATUSES.pause })\n        break\n      case STATUSES.pause:\n        this.setState({ status: STATUSES.play }, this.nextStep)\n        break\n      default:\n    }\n  }\n\n  changeHandler = (name, value) => {\n    switch (name) {\n      case IDS.width:\n        this.updateFieldSize({ width: value })\n        break\n      case IDS.height:\n        this.updateFieldSize({ height: value })\n        break\n      default:\n    }\n    this.setState({ [name]: value })\n  }\n\n  fieldUpdater\n\n  render () {\n    return (\n      <div>\n        <Connector\n          state={this.state}\n          onChange={this.changeHandler}\n        >\n          <Input\n            id={IDS.width}\n            label=\"Field width\"\n            defaultNum={1}\n          />\n          <Input\n            id={IDS.height}\n            label=\"Field height\"\n            defaultNum={1}\n          />\n          <Input\n            id={IDS.states}\n            label=\"Number of states\"\n            defaultNum={1}\n          />\n        </Connector>\n        <div\n          onClick={this.handlePlay}\n          onKeyDown={this.processKey}\n          className={style.field}\n          role=\"presentation\"\n          title={this.getActionName()}\n        >\n          <CanvasField\n            width={this.state.width}\n            height={this.state.height}\n            states={this.state.states}\n            ref={this.canvas}\n          />\n        </div>\n        <p><em>Press Space or click field for play / pause</em></p>\n        <button type=\"button\" className={style.bigButton} onClick={this.handleNew}>\n          New\n        </button>\n        <button type=\"button\" className={style.bigButton} onClick={this.handlePlay}>\n          {this.getActionName()}\n        </button>\n        {this.state.status === STATUSES.pause && (\n          <button type=\"button\" className={style.bigButton} onClick={this.handleNext}>\n            Next step\n          </button>\n        )}\n      </div>\n    )\n  }\n}\n"],"sourceRoot":""}